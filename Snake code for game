using System;
using System.Collections.Generic;
using System.Linq;

namespace Snacke
{
    public class GameState
    {
        public int Rows { get; }
        public int Cols { get; }
        public GridValue[,] Grid { get; }
        public Direction Dir { get; private set; }
        public int Score { get; private set; }
        public bool GameOver { get; private set; }
        private LinkedList<Position> snakePositions = new LinkedList<Position>();
        private Random random = new Random();

        public GameState(int rows, int cols)
        {
            Rows = rows; Cols = cols;
            Grid = new GridValue[rows, cols];
            Dir = Direction.Right;
            InitializeGameState();
        }

        private void InitializeGameState()
        {
            AddSnake(); AddFood();
        }

        private void AddSnake()
        {
            for (int c = 1; c <= 3; c++) UpdatePosition(Rows / 2, c, GridValue.Snake, addToSnake: true);
        }

        private void AddFood()
        {
            var emptyPositions = EmptyPositions().ToList();
            if (emptyPositions.Any()) UpdatePosition(emptyPositions[random.Next(emptyPositions.Count)], GridValue.Food);
        }

        public void Move()
        {
            var newHeadPos = HeadPosition().Translate(Dir);
            var hit = WillHit(newHeadPos);
            if (hit == GridValue.Outside || hit == GridValue.Snake) GameOver = true;
            else
            {
                if (hit == GridValue.Empty) RemoveTail();
                if (hit != GridValue.Food) AddHead(newHeadPos);
                else { AddHead(newHeadPos); Score++; AddFood(); }
            }
        }

        private IEnumerable<Position> EmptyPositions() => Enumerable.Range(0, Rows)
            .SelectMany(r => Enumerable.Range(0, Cols), (r, c) => new Position(r, c))
            .Where(pos => Grid[pos.Row, pos.Col] == GridValue.Empty);

        private void UpdatePosition(int row, int col, GridValue value, bool addToSnake = false) => UpdatePosition(new Position(row, col), value, addToSnake);

        private void UpdatePosition(Position pos, GridValue value, bool addToSnake = false)
        {
            Grid[pos.Row, pos.Col] = value;
            if (addToSnake) snakePositions.AddFirst(pos);
        }

        private void AddHead(Position pos) => UpdatePosition(pos, GridValue.Snake, true);

        private void RemoveTail()
        {
            var tail = snakePositions.Last.Value;
            Grid[tail.Row, tail.Col] = GridValue.Empty;
            snakePositions.RemoveLast();
        }

        private GridValue WillHit(Position pos) => OutsideGrid(pos) ? GridValue.Outside : Grid[pos.Row, pos.Col] == GridValue.Food ? GridValue.Food : GridValue.Empty;

        private bool OutsideGrid(Position pos) => pos.Row < 0 || pos.Row >= Rows || pos.Col < 0 || pos.Col >= Cols;

        public Position HeadPosition() => snakePositions.First.Value;
        public IEnumerable<Position> SnakePositions() => snakePositions;
    }
}
